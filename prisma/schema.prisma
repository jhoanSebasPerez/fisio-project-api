generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String             @id @default(uuid())
  name                  String
  email                 String             @unique
  hashedPassword        String?
  phone                 String?
  role                  Role               @default(PATIENT)
  active                Boolean            @default(true)
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  patientAppointments   Appointment[]      @relation("PatientAppointments")
  therapistAppointments Appointment[]      @relation("TherapistAppointments")
  Schedule              Schedule[]
  surveyResponses       SurveyResponse[]
  therapistNotes        TherapistNote[]
  therapistServices     TherapistService[]
}

model Service {
  id                  String               @id @default(uuid())
  name                String
  description         String
  duration            Int
  price               Float
  isActive            Boolean              @default(true)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  imageUrl            String?
  appointmentServices AppointmentService[]
  therapistServices   TherapistService[]
}

model TherapistService {
  id          String   @id @default(uuid())
  therapistId String
  serviceId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  therapist   User     @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@unique([therapistId, serviceId])
}

model Appointment {
  id                  String               @id @default(uuid())
  patientId           String
  therapistId         String?
  date                DateTime
  status              AppointmentStatus    @default(SCHEDULED)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  patient             User                 @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade)
  therapist           User?                @relation("TherapistAppointments", fields: [therapistId], references: [id])
  appointmentServices AppointmentService[]
  surveyResponses     SurveyResponse[]
  therapistNotes      TherapistNote[]
}

model AppointmentService {
  id            String      @id @default(uuid())
  appointmentId String
  serviceId     String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([appointmentId, serviceId])
}

model TherapistNote {
  id            String      @id @default(uuid())
  appointmentId String
  therapistId   String
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  therapist     User        @relation(fields: [therapistId], references: [id], onDelete: Cascade)
}

model SurveyResponse {
  id            String      @id @default(uuid())
  appointmentId String
  patientId     String
  satisfaction  Int
  comments      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patient       User        @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

model Schedule {
  id          String    @id
  therapistId String
  dayOfWeek   DayOfWeek
  startTime   String
  endTime     String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  metadata    Json?
  User        User      @relation(fields: [therapistId], references: [id], onDelete: Cascade)

  @@unique([therapistId, dayOfWeek, startTime, endTime])
}

enum Role {
  ADMIN
  THERAPIST
  PATIENT
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  RESCHEDULED
  CANCELLED
  COMPLETED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
